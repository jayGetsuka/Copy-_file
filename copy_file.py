# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Steal.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from glob import glob
import shutil
import os
from time import sleep


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(714, 840)
        MainWindow.setStyleSheet("background-color: rgb(172, 200, 167);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(160, 0, 371, 41))
        self.label.setStyleSheet("font: 87 22pt \"Source Sans Pro Black\";")
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(220, 210, 421, 51))
        self.lineEdit.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px sold rgb(37,39,48);\n"
"border-radius: 20px;\n"
"padding-left: 20px;\n"
"padding-right: 20px;\n"
"background-color: rgb(170, 0, 255);\n"
"font: 63 20pt \"Source Code Pro Semibold\";")
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(80, 220, 141, 31))
        self.label_2.setStyleSheet("font: 14pt \"Ink Free\";")
        self.label_2.setObjectName("label_2")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(60, 450, 601, 321))
        self.textEdit.setStyleSheet("background-color: rgb(195, 195, 195);\n"
"background-color: rgb(170, 170, 127);")
        self.textEdit.setObjectName("textEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(190, 380, 121, 41))
        self.pushButton.setStyleSheet("font: 10pt \"Noto Sans Hebrew\";\n"
"color: black;\n"
"border-style: outset;\n"
"border-width:2px;\n"
"border-radius:20px;\n"
"border-color:black;\n"
"background-color: rgb(0, 255, 127);")
        self.pushButton.setObjectName("pushButton")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(220, 130, 141, 51))
        self.lineEdit_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px sold rgb(37,39,48);\n"
"border-radius: 20px;\n"
"padding-left: 20px;\n"
"padding-right: 20px;\n"
"background-color: rgb(85, 85, 255);\n"
"font: 63 20pt \"Source Code Pro Semibold\";")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(30, 70, 711, 51))
        self.label_3.setStyleSheet("font: 87 italic 18pt \"Source Sans Pro Black\";")
        self.label_3.setObjectName("label_3")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(40, 130, 171, 41))
        self.label_6.setStyleSheet("font: 14pt \"Ink Free\";")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(110, 300, 101, 41))
        self.label_7.setStyleSheet("font: 14pt \"Ink Free\";")
        self.label_7.setObjectName("label_7")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(220, 291, 421, 51))
        self.lineEdit_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px sold rgb(37,39,48);\n"
"border-radius: 20px;\n"
"padding-left: 20px;\n"
"padding-right: 20px;\n"
"background-color: rgb(170, 0, 127);\n"
"font: 63 20pt \"Source Code Pro Semibold\";")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(390, 380, 121, 41))
        self.pushButton_2.setStyleSheet("font: 10pt \"Noto Sans Hebrew\";\n"
"color: black;\n"
"border-style: outset;\n"
"border-width:2px;\n"
"border-radius:20px;\n"
"border-color:black;\n"
"background-color: rgb(255, 0, 0);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(410, 40, 191, 21))
        self.label_4.setObjectName("label_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 714, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton.clicked.connect(self.textEdit.show)
        self.pushButton_2.clicked.connect(self.lineEdit_3.clear)
        self.pushButton_2.clicked.connect(self.lineEdit.clear)
        self.pushButton_2.clicked.connect(self.lineEdit_2.clear)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Copy File To Flash Drive"))
        self.label.setText(_translate("MainWindow", "COPY FILE PROGRAM"))
        self.lineEdit.setToolTip(_translate("MainWindow", "<html><head/><body><p>Example   C:\\Users\\User\\Pictures</p></body></html>"))
        self.lineEdit.setWhatsThis(_translate("MainWindow", "C:\\Users\\User\\Pictures"))
        self.lineEdit_3.setToolTip(_translate("MainWindow", "<html><head/><body><p>Example   C:\\Users\\User\\Pictures</p></body></html>"))
        self.lineEdit_3.setWhatsThis(_translate("MainWindow", "C:\\Users\\User\\Pictures"))
        self.label_2.setText(_translate("MainWindow", "Start Path"))
        self.pushButton.setText(_translate("MainWindow", "OK"))
        self.label_3.setText(_translate("MainWindow", "1. Video                   2. Sound               3.Pictures        4.All"))
        self.label_6.setText(_translate("MainWindow", "Choose NumBer"))
        self.label_7.setText(_translate("MainWindow", "Move To"))
        self.pushButton_2.setText(_translate("MainWindow", "Cancel"))
        self.label_4.setText(_translate("MainWindow", "@https://github.com/jayGetsuka"))
        self.pushButton.clicked.connect(self.start)

    def start(self):
        self.path = self.lineEdit_3.text()
        num = self.lineEdit_2.text()
        if num == "1":
            self.Video(glob(self.lineEdit.text()))
        elif num == "2":
            self.sound(glob(self.lineEdit.text()))
        elif num == "3":
            self.pict(glob(self.lineEdit.text()))
        elif num == "4":
            self.All(glob(self.lineEdit.text()))
        else:
            self.textEdit.setText("กรุณากรอกหมายเลขใหม่อีกครั้ง")

    def pict(self,file):
        for f in file:
            if f[-4:] == ".png":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".jpg":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".jfif":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".gif":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            else:
                try:
                    os.chdir(f)
                    tet = glob(f + str("\*"))
                    if tet == []:
                        continue
                    else:
                        self.pict(tet)
                except:
                    continue

    def sound(self,file):
        for f in file:
            if f[-4:] == ".mp3":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".wma":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".acc":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".m4a":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".wav":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            else:
                try:
                    os.chdir(f)
                    tet = glob(f + str("\*"))
                    if tet == []:
                        continue
                    else:
                        self.sound(tet)
                except:
                    continue

    def Video(self,file):
        for f in file:
            if f[-4:] == ".avi":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".mp4":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".wmv":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".MPEG":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".MOV":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".dat":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".flv":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            else:
                try:
                    os.chdir(f)
                    tet = glob(f + str("\*"))
                    if tet == []:
                        continue
                    else:
                        self.Video(tet)
                except:
                    continue

    def All(self,file):
        for f in file:
            if f[-4:] == ".png":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".mp4":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".pdf":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".jpg":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".mp3":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".jfif":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            elif f[-4:] == ".gif":
                self.textEdit.append(str(f))
                shutil.copy(src=f, dst=self.path)
            else:
                try:
                    os.chdir(f)
                    tet = glob(f + str("\*"))
                    if tet == []:
                        continue
                    else:
                        self.All(tet)
                except:
                    continue
import image_copy_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
